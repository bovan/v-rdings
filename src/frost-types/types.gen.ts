// This file is auto-generated by @hey-api/openapi-ts

/**
 * The calculation method for an element.
 */
export type CalcMethod = {
    /**
     * The base name of the element
     */
    baseName?: string;
    /**
     * The primary method.
     */
    method?: string;
    /**
     * The inner method.
     */
    innerMethod?: string;
    /**
     * The period over which the primary method applies.
     */
    period?: string;
    /**
     * The period over which the inner method applies.
     */
    innerPeriod?: string;
    /**
     * The addition applicable to the primary method.
     */
    addition?: string;
    /**
     * The description of the primary method.
     */
    methodDescription?: string;
    /**
     * The description of the inner method.
     */
    innerMethodDescription?: string;
    /**
     * The unit of the primary method.
     */
    methodUnit?: string;
    /**
     * The unit of the inner method.
     */
    innerMethodUnit?: string;
};

/**
 * The CF convention equivalent of the element.
 */
export type CfConvention = {
    /**
     * The CF standard name of the element.
     */
    standardName?: string;
    /**
     * The CF cell method(s) for the element, if any.
     */
    cellMethod?: string;
    /**
     * The unit of the CF element.
     */
    unit?: string;
    /**
     * The CF version.
     */
    version?: string;
};

/**
 * Metadata for a single element.
 */
export type Element = {
    /**
     * The Frost API id of the element.
     */
    id?: string;
    /**
     * The name of the element.
     */
    name?: string;
    /**
     * The description of the element.
     */
    description?: string;
    /**
     * The default unit, as used for data (UDUNITS notation). *code* if the unit is described using a code table.
     */
    unit?: string;
    /**
     * If the unit is a *code*, the codetable that describes the codes used.
     */
    codeTable?: string;
    /**
     * The status of the element; one of 'CF compatible', 'in review', 'MetNo local convention', or 'test'
     */
    status?: string;
    calculationMethod?: CalcMethod;
    /**
     * The category of the element.
     */
    category?: string;
    timeOffsets?: TimeOffsets;
    sensorLevels?: SensorLevels;
    oldConvention?: OldMetNoConvention;
    cfConvention?: CfConvention;
};

/**
 * Data response for element metadata.
 */
export type ElementResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<Element>;
};

/**
 * The Met.no old element code equivalent(s) of the element.
 */
export type OldMetNoConvention = {
    /**
     * The old element code(s) of the element.
     */
    elementCodes?: Array<string>;
    /**
     * The unit of the old element code(s).
     */
    unit?: string;
};

/**
 * The default level and available levels for a specific sensor level type.
 */
export type SensorLevels = {
    /**
     * The level type.
     */
    levelType?: string;
    /**
     * The level unit.
     */
    unit?: string;
    /**
     * The default level value.
     */
    defaultValue?: {
        [key: string]: unknown;
    };
    /**
     * The available level values.
     */
    values?: Array<number>;
};

/**
 * The time offsets for the element.
 */
export type TimeOffsets = {
    /**
     * The default time offset.
     */
    defaultValue?: string;
    /**
     * The available time offsets.
     */
    values?: Array<string>;
};

/**
 * Metadata for a single code table.
 */
export type CodeTable = {
    /**
     * The code table name.
     */
    id?: string;
    /**
     * The main description.
     */
    description?: string;
    /**
     * Additional info.
     */
    additionalInfo?: string;
    /**
     * The number of values.
     */
    size?: {
        [key: string]: unknown;
    };
    /**
     * The values.
     */
    values?: Array<CodeTableValue>;
};

/**
 * Data response for code table metadata.
 */
export type CodeTableResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<CodeTable>;
};

/**
 * Metadata for a single code table value.
 */
export type CodeTableValue = {
    /**
     * The code table value.
     */
    value?: string;
    /**
     * The main description.
     */
    description?: string;
    /**
     * Additional info.
     */
    additionalInfo?: string;
};

/**
 * A single climate normal value with metadata
 */
export type ClimateNormal = {
    /**
     * Source id.
     */
    sourceId?: string;
    /**
     * Element id.
     */
    elementId?: string;
    /**
     * Validity period.
     */
    period?: string;
    /**
     * Month.
     */
    month?: {
        [key: string]: unknown;
    };
    /**
     * Day of month (omitted if n/a).
     */
    day?: {
        [key: string]: unknown;
    };
    /**
     * Normal value (omitted if not found).
     */
    normal?: {
        [key: string]: unknown;
    };
};

/**
 * Data response for climate normals
 */
export type ClimateNormalsResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<ClimateNormal>;
};

/**
 * An available metadata combination for climate normals
 */
export type ClimateNormalsAvailable = {
    /**
     * Source id.
     */
    sourceId?: string;
    /**
     * Element id.
     */
    elementId?: string;
    /**
     * Validity period.
     */
    period?: string;
};

/**
 * Data response for an available metadata combination for climate normals
 */
export type ClimateNormalsAvailableResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<ClimateNormalsAvailable>;
};

export type Point = {
    /**
     * The type of the geometry object
     */
    '@type'?: string;
    /**
     * Coordinates of the geometry object
     */
    coordinates?: Array<number>;
};

/**
 * Metadata for a single source.
 */
export type Source = {
    /**
     * The source type of the Source.
     */
    '@type'?: string;
    /**
     * The Frost API id of the source.
     */
    id?: string;
    /**
     * The name of the source.
     */
    name?: string;
    /**
     * The short name of the source.
     */
    shortName?: string;
    /**
     * The country affiliation of the source.
     */
    country?: string;
    /**
     * The ISO 3166-1 alpha-2 code of the country.
     */
    countryCode?: string;
    /**
     * The assigned WMO number for a SensorSystem, if one exists.
     */
    wmoId?: {
        [key: string]: unknown;
    };
    geometry?: Point;
    /**
     * The distance (in kilometers) from a reference point.
     */
    distance?: {
        [key: string]: unknown;
    };
    /**
     * The elevation of the source in meters above sea level.
     */
    masl?: {
        [key: string]: unknown;
    };
    /**
     * The datetime from which the source is valid.
     */
    validFrom?: string;
    /**
     * The datetime to which the source was valid (if no longer valid).
     */
    validTo?: string;
    /**
     * County name.
     */
    county?: string;
    /**
     * County id.
     */
    countyId?: {
        [key: string]: unknown;
    };
    /**
     * Municipality name.
     */
    municipality?: string;
    /**
     * Municipality id.
     */
    municipalityId?: {
        [key: string]: unknown;
    };
    /**
     * Ontology id
     */
    ontologyId?: {
        [key: string]: unknown;
    };
    /**
     * Station holders.
     */
    stationHolders?: Array<string>;
    /**
     * External ids.
     */
    externalIds?: Array<string>;
    /**
     * ICAO codes.
     */
    icaoCodes?: Array<string>;
    /**
     * Ship codes.
     */
    shipCodes?: Array<string>;
    /**
     * WIGOS id.
     */
    wigosId?: string;
};

/**
 * Data response for source metadata.
 */
export type SourceResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<Source>;
};

/**
 * A single IDF value.
 */
export type IdfValue = {
    /**
     * Intensity.
     */
    intensity?: number;
    /**
     * Duration in minutes.
     */
    duration?: number;
    /**
     * Frequency in years.
     */
    frequency?: number;
};

/**
 * Metadata for a single rainfall IDF location.
 */
export type RainfallIdf = {
    /**
     * The Frost API id of the source.
     */
    sourceId?: string;
    /**
     * The version of the source (if applicable).
     */
    version?: string;
    geometry?: Point;
    /**
     * Elevation (in meters above sea level) of the IDF location.
     */
    masl?: {
        [key: string]: unknown;
    };
    /**
     * Operating periods of the source.
     */
    operatingPeriods?: Array<string>;
    /**
     * The number of seasons the source has been operational.
     */
    numberOfSeasons?: {
        [key: string]: unknown;
    };
    /**
     * The first year of the data period.
     */
    firstYearOfPeriod?: {
        [key: string]: unknown;
    };
    /**
     * The last year of the data period.
     */
    lastYearOfPeriod?: {
        [key: string]: unknown;
    };
    /**
     * The unit of measure for the intensity. The default unit is litre/second*Hectar.
     */
    unit?: string;
    /**
     * The values of the source and location.
     */
    values?: Array<IdfValue>;
};

/**
 * Data response for rainfall IDF.
 */
export type RainfallIdfResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<RainfallIdf>;
};

/**
 * Metadata for a single rainfall IDF source.
 */
export type RainfallIdfSource = {
    /**
     * The Frost API id of the source.
     */
    sourceId?: string;
    /**
     * The version of the source (if applicable).
     */
    version?: string;
    /**
     * Start of the earliest operating period of the source.
     */
    validFrom?: string;
    /**
     * End of the latest operating period of the source.
     */
    validTo?: string;
    /**
     * The number of seasons the source has been operational.
     */
    numberOfSeasons?: {
        [key: string]: unknown;
    };
    /**
     * The first year of the data period.
     */
    firstYearOfPeriod?: {
        [key: string]: unknown;
    };
    /**
     * The last year of the data period.
     */
    lastYearOfPeriod?: {
        [key: string]: unknown;
    };
};

/**
 * Data response for available rainfall IDF sources.
 */
export type RainfallIdfSourcesResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<RainfallIdfSource>;
};

export type Location = {
    /**
     * The name of the geographic feature.
     */
    name?: string;
    /**
     * The type of the named geographic feature.
     */
    feature?: string;
    geometry?: Point;
};

/**
 * Data response for location metadata.
 */
export type LocationResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<Location>;
};

export type Level = {
    /**
     * The reference type of the level value.
     */
    levelType?: string;
    /**
     * The unit of measurement of the level value.
     */
    unit?: string;
    /**
     * The level value.
     */
    value?: {
        [key: string]: unknown;
    };
};

/**
 * Recorded time series that exist for these parameters.
 */
export type ObservationTimeSeries = {
    /**
     * The sourceId at which this series of values were observed.
     */
    sourceId?: string;
    geometry?: Point;
    level?: Level;
    /**
     * The datetime from which data exists in this time series.
     */
    validFrom?: string;
    /**
     * The datetime to which data exists in this time series. Null if data is still being added to the time series.
     */
    validTo?: string;
    /**
     * The offset from the validFrom datetime. Add the offset to validFrom to get the reference time of the first observation in the time series.
     */
    timeOffset?: string;
    /**
     * The time between consecutive observations in the time series. Given the reference time of an observation, add the timeResolution to get the next observation in the time series.
     */
    timeResolution?: string;
    /**
     * The internal ID of the time series.
     */
    timeSeriesId?: {
        [key: string]: unknown;
    };
    /**
     * The Frost API ID of the element observed.
     */
    elementId?: string;
    /**
     * The unit of measure of the observed data. *code* if the unit is described using a code table.
     */
    unit?: string;
    /**
     * If the unit is a *code*, the codetable that describes the codes used.
     */
    codeTable?: string;
    /**
     * The performance category.
     */
    performanceCategory?: string;
    /**
     * The exposure category.
     */
    exposureCategory?: string;
    /**
     * The status of the time series.
     */
    status?: string;
    /**
     * The URI that can be used to retrieve this time series.
     */
    uri?: string;
    userGroupIds?: Array<number>;
};

/**
 * Data response for observation time series.
 */
export type ObservationTimeSeriesResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<ObservationTimeSeries>;
};

/**
 * A single observation.
 */
export type Observation = {
    /**
     * The ID of the element being observed.
     */
    elementId?: string;
    /**
     * The observed value (either a number or a UTC datetime of the format YYYY-MM-DD hh:mm:ss.sss).
     */
    value?: string;
    /**
     * The original observed value (either a number or a UTC datetime of the format YYYY-MM-DD hh:mm:ss.sss).
     */
    origValue?: string;
    /**
     * The unit of measurement of the observed value.
     */
    unit?: string;
    /**
     * If the unit is a *code*, the codetable that describes the codes used.
     */
    codeTable?: string;
    level?: Level;
    /**
     * The offset from referenceTime at which the observation applies.
     */
    timeOffset?: string;
    /**
     * The time between consecutive observations in the time series to which the observation belongs.
     */
    timeResolution?: string;
    /**
     * The internal ID of the time series to which the observation belongs.
     */
    timeSeriesId?: {
        [key: string]: unknown;
    };
    /**
     * The performance category of the source when the value was observed.
     */
    performanceCategory?: string;
    /**
     * The exposure category of the source when the value was observed.
     */
    exposureCategory?: string;
    /**
     * The quality control flag of the observed value.
     */
    qualityCode?: {
        [key: string]: unknown;
    };
    /**
     * The control info of the observed value.
     */
    controlInfo?: string;
    /**
     * The data version of the data value, if one exists (**Note: Currently not available for any observation data).
     */
    dataVersion?: {
        [key: string]: unknown;
    };
};

/**
 * Data response for observation data.
 */
export type ObservationResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<ObservationsAtRefTime>;
};

/**
 * Observations at a single reference time.
 */
export type ObservationsAtRefTime = {
    /**
     * The sourceId at which values were observed.
     */
    sourceId?: string;
    geometry?: Point;
    /**
     * The base time at which values were observed (any timeOffset must be added).
     */
    referenceTime?: string;
    /**
     * The observed values. This is a map of the form [ElementId (as a String), Observation]
     */
    observations?: Array<Observation>;
};

export type Action = {
    [key: string]: unknown;
};

export type ActionAnyContent = {
    [key: string]: unknown;
};

/**
 * Quality information for an observation
 */
export type QualityInformation = {
    summarized?: UserQualityInformation;
    /**
     * The quality code flag.
     */
    flag?: string;
    /**
     * details
     */
    details?: Array<TextualQualityInformation>;
};

/**
 * Data response for observation time series.
 */
export type QualityInformationResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    data?: QualityInformation;
};

/**
 * Textual description of a quality flag
 */
export type TextualQualityInformation = {
    /**
     * controlType
     */
    controlType?: string;
    /**
     * value
     */
    value?: number;
    /**
     * meaninig
     */
    meaning?: string;
};

/**
 * Textual description of a user quality flag
 */
export type UserQualityInformation = {
    /**
     * value
     */
    value?: number;
    /**
     * shortMeaning
     */
    shortMeaning?: string;
    /**
     * meaninig
     */
    meaning?: string;
};

/**
 * A single record value with metadata
 */
export type Record = {
    /**
     * Source id.
     */
    sourceId?: string;
    /**
     * Source name.
     */
    sourceName?: string;
    /**
     * County.
     */
    county?: string;
    /**
     * Municipality.
     */
    municipality?: string;
    /**
     * Element id.
     */
    elementId?: string;
    /**
     * Month.
     */
    month?: {
        [key: string]: unknown;
    };
    /**
     * Date/time of occurrence 1.
     */
    referenceTime?: string;
    /**
     * Record value.
     */
    value?: {
        [key: string]: unknown;
    };
};

/**
 * Data response for records
 */
export type RecordsResponse = {
    /**
     * The Json-LD context.
     */
    '@context'?: string;
    /**
     * The object type.
     */
    '@type'?: string;
    /**
     * The version of the API that generated this response.
     */
    apiVersion?: string;
    /**
     * The license that applies to this content.
     */
    license?: string;
    /**
     * The time at which this document was created (RFC 3339).
     */
    createdAt?: string;
    /**
     * The time, in seconds, that this document took to generate.
     */
    queryTime?: string;
    /**
     * The current number of items in this result set.
     */
    currentItemCount?: number;
    /**
     * The maximum number of items in a result set.
     */
    itemsPerPage?: number;
    /**
     * The offset of the first item in the result set. The Frost API uses a zero-base index.
     */
    offset?: number;
    /**
     * The total number of items in this specific result set.
     */
    totalItemCount?: number;
    /**
     * The next link indicates how more data can be retrieved. It points to the URI to load the next set of data.
     */
    nextLink?: string;
    /**
     * The previous link indicates how more data can be retrieved. It points to the URI to load the previous set of data.
     */
    previousLink?: string;
    /**
     * The current link indicates the URI that was used to generate the current API response
     */
    currentLink?: string;
    /**
     * Container for all the data from the response.
     */
    data?: Array<Record>;
};

export type GetElementsData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query?: {
        /**
         * The element IDs to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. An element ID is structured as a <a href=concepts2.html#calculationmethod>calculation method</a>.
         */
        ids?: string;
        /**
         * The element names to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        names?: string;
        /**
         * The descriptions to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        descriptions?: string;
        /**
         * The units to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. <b>Note:</b> when the unit is 'code', a codetable is in use.
         */
        units?: string;
        /**
         * The code tables to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. <b>Note:</b> When a codetable is in use, the unit is 'code'.
         */
        codeTables?: string;
        /**
         * The statuses to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        statuses?: string;
        /**
         * The <a href=concepts2.html#calculationmethod>calculation method</a> filter as a <a href=concepts2.html#jsonfilter>JSON filter</a> that supports the following keys: baseNames, methods, innerMethods, periods, innerPeriods, thresholds, methodDescriptions, innerMethodDescriptions, methodUnits, and innerMethodUnits
         */
        calculationMethod?: string;
        /**
         * The categories to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        categories?: string;
        /**
         * The time offsets to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        timeOffsets?: string;
        /**
         * The sensor levels filter as a <a href=concepts2.html#jsonfilter>JSON filter</a> that supports the following keys: levelTypes, units, defaultValues, and values. **Note:** if the sensor level values may vary dynamically for the element, the values key won't have any effect.
         */
        sensorLevels?: string;
        /**
         * The old MET Norway element codes to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        oldElementCodes?: string;
        /**
         * The old MET Norway units to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        oldUnits?: string;
        /**
         * The CF standard names to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        cfStandardNames?: string;
        /**
         * The CF cell methods to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        cfCellMethods?: string;
        /**
         * The CF units to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        cfUnits?: string;
        /**
         * The CF versions to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        cfVersions?: string;
        /**
         * The information to return as a comma-separated list of id, name, description, unit, codeTable, status, cmBaseName, cmMethod, cmInnerMethod, cmPeriod, cmInnerPeriod, cmThreshold, cmMethodDescription, cmInnerMethodDescription, cmMethodUnit, cmInnerMethodUnit, category, sensorLevelType, sensorLevelUnit, sensorLevelDefaultValue, sensorLevelValues, oldElementCodes, oldUnit, cfStandardName, cfCellMethod, cfUnit, or cfVersion. For example 'id,unit,oldElementCodes,oldUnit'. If omitted, all fields are returned.
         */
        fields?: string;
        /**
         * ISO language/locale to be used for search filters and return values.
         */
        lang?: 'en-US' | 'nb-NO' | 'nn-NO';
    };
    url: '/elements/v0.{format}';
};

export type GetElementsErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for the list of query Ids.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetElementsResponses = {
    /**
     * successful operation
     */
    200: ElementResponse;
};

export type GetElementsResponse = GetElementsResponses[keyof GetElementsResponses];

export type GetCodeTablesData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query?: {
        /**
         * The code table IDs to get metadata for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        ids?: string;
        /**
         * The fields to include in the output in addition to the code table name as a comma-separated list of header and values. Leave the parameter empty to include both header and values.
         */
        fields?: string;
        /**
         * ISO language/locale to be used for search filters and return values.
         */
        lang?: 'en-US' | 'nb-NO' | 'nn-NO';
    };
    url: '/elements/codeTables/v0.{format}';
};

export type GetCodeTablesErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for the list of query Ids.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetCodeTablesResponses = {
    /**
     * successful operation
     */
    200: CodeTableResponse;
};

export type GetCodeTablesResponse = GetCodeTablesResponses[keyof GetCodeTablesResponses];

export type GetClimateNormalsData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query: {
        /**
         * The sources to get climate normals for as a comma-separated list. Each source should be of the form SN&lt;number&gt;.
         */
        sources: string;
        /**
         * The elements to get climate normals for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        elements?: string;
        /**
         * The validity period, e.g. '1931/1960'. If specified, only climate normals for this period will be returned.
         */
        period?: string;
    };
    url: '/climatenormals/v0.{format}';
};

export type GetClimateNormalsErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for this combination of query parameters.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetClimateNormalsResponses = {
    /**
     * successful operation
     */
    200: ClimateNormalsResponse;
};

export type GetClimateNormalsResponse = GetClimateNormalsResponses[keyof GetClimateNormalsResponses];

export type GetAvailableData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query?: {
        /**
         * If specified, only combinations matching these sources may be included in the output. Enter a comma-separated list of sources of the form SN&lt;number&gt;. If omitted, any source will match.
         */
        sources?: string;
        /**
         * If specified, only combinations matching these elements may be included in the output. Enter a comma-separated list of element names in the form of <a href=concepts2.html#searchfilter>search filters</a>.  If omitted, any element will match.
         */
        elements?: string;
        /**
         * If specified, only combinations matching these validity periods may be included in the output. Enter a comma-separated list of validity period of the form '&lt;from year&gt;/&lt;to year&gt;', e.g. '1931/1960'.  If omitted, any period will match.
         */
        periods?: string;
        /**
         * Specifies what information to return as a comma-separated list of 'sourceid', 'elementid', or 'period'. For example, 'sourceid,period' specifies that only source IDs and periods will appear in the output. If omitted, all fields are returned.
         */
        fields?: string;
    };
    url: '/climatenormals/available/v0.{format}';
};

export type GetAvailableErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for this combination of query parameters.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetAvailableResponses = {
    /**
     * successful operation
     */
    200: ClimateNormalsAvailableResponse;
};

export type GetAvailableResponse = GetAvailableResponses[keyof GetAvailableResponses];

export type GetSourcesData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query?: {
        /**
         * The Frost API source ID(s) that you want metadata for. Enter a comma-separated list to select multiple sources. For sources of type SensorSystem or RegionDataset, the source ID must be of the form &lt;prefix&gt;&lt;int&gt; where &lt;prefix&gt; is SN for SensorSystem and TR, NR, GR, or GF for RegionDataset. The integer following the prefix may contain wildcards, e.g. SN18\*7\* matches both SN18700 and SN18007.
         */
        ids?: string;
        /**
         * The type of Frost API source that you want metadata for.
         */
        types?: 'SensorSystem' | 'InterpolatedDataset' | 'RegionDataset';
        /**
         * If specified, only sources for which observations are available for all of these elements may be included in the result. Enter a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>.
         */
        elements?: string;
        /**
         * Get Frost API sources defined by a specified geometry. Geometries are specified as either nearest(POINT(...)) or POLYGON(...) using <a href='https://en.wikipedia.org/wiki/Well-known_text'>WKT</a>; see the reference section on the <a href=concepts2.html#geometryspecification>Geometry Specification</a> for documentation and examples. If the nearest() function is specified, the output will include the distance in kilometers from the reference point.
         */
        geometry?: string;
        /**
         * The maximum number of sources returned when using nearest(POINT(...)) for geometry. The default value is 1.
         */
        nearestmaxcount?: string;
        /**
         * If specified, only sources that have been, or still are, valid/applicable during some part of this interval may be included in the result. Specify &lt;date&gt;/&lt;date&gt;, &lt;date&gt;/now, &lt;date&gt;, or now, where &lt;date&gt; is of the form YYYY-MM-DD, e.g. 2017-03-06. The default is 'now', i.e. only currently valid/applicable sources are included.
         */
        validtime?: string;
        /**
         * If specified, only sources whose 'name' attribute matches this <a href=concepts2.html#searchfilter>search filter</a> may be included in the result.
         */
        name?: string;
        /**
         * If specified, only sources whose 'country' or 'countryCode' attribute matches this <a href=concepts2.html#searchfilter>search filter</a> may be included in the result.
         */
        country?: string;
        /**
         * If specified, only sources whose 'county' or 'countyId' attribute matches this <a href=concepts2.html#searchfilter>search filter</a> may be included in the result.
         */
        county?: string;
        /**
         * If specified, only sources whose 'municipality' or 'municipalityId' attribute matches this <a href=concepts2.html#searchfilter>search filter</a> may be included in the result.
         */
        municipality?: string;
        /**
         * If specified, only sources whose 'wmoId' attribute matches this <a href=concepts2.html#searchfilter>search filter</a> may be included in the result.
         */
        wmoid?: string;
        /**
         * If specified, only sources whose 'stationHolders' attribute contains at least one name that matches this <a href=concepts2.html#searchfilter>search filter</a> may be included in the result.
         */
        stationholder?: string;
        /**
         * If specified, only sources whose 'externalIds' attribute contains at least one value that matches any of the specified, comma-separated list of <a href=concepts2.html#searchfilter>search filters</a> may be included in the result.
         */
        externalids?: string;
        /**
         * If specified, only sources whose 'icaoCodes' attribute contains at least one name that matches this <a href=concepts2.html#searchfilter>search filter</a> may be included in the result.
         */
        icaocode?: string;
        /**
         * If specified, only sources whose 'shipCodes' attribute contains at least one name that matches this <a href=concepts2.html#searchfilter>search filter</a> may be included in the result.
         */
        shipcode?: string;
        /**
         * If specified, only sources whose 'wigosId' attribute matches this <a href=concepts2.html#searchfilter>search filter</a> may be included in the result.
         */
        wigosid?: string;
        /**
         * A comma-separated list of the ontologyids that should be present in the response. Default if not set is to include all.
         */
        ontologyid?: string;
        /**
         * A comma-separated list of the fields that should be present in the response. If set, only those properties listed here will be visible in the result set; e.g.: name,country will show only those two entries in the result in addition to the id which is always shown.
         */
        fields?: string;
    };
    url: '/sources/v0.{format}';
};

export type GetSourcesErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for the list of query Ids.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetSourcesResponses = {
    /**
     * successful operation
     */
    200: SourceResponse;
};

export type GetSourcesResponse = GetSourcesResponses[keyof GetSourcesResponses];

export type GetRainfallIdfData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query?: {
        /**
         * The Frost API source ID(s) that you want IDF data for. Enter either a comma-separated list of one or more stations (each of the form SN&lt;number&gt;[:&lt;number&gt;|all]), or the name of a gridded dataset. If left out, IDF data for all available station sources is returned.
         */
        sources?: string;
        /**
         * The geographic position from which to get IDF data in case of a gridded dataset. Format: POINT(&lt;longitude degrees&gt; &lt;latitude degrees&gt). Data from the nearest grid point is returned.
         */
        location?: string;
        /**
         * The Frost API IDF duration(s), in minutes, that you want IDF data for. Enter a comma-separated list to select multiple durations.
         */
        durations?: string;
        /**
         * The Frost API IDF frequencies (return periods), in years, that you want IDF data for. Enter a comma-separated list to select multiple frequencies.
         */
        frequencies?: string;
        /**
         * The unit of measure for the intensity. Specify 'mm' for millimetres per minute multiplied by the duration, or 'lsha' for litres per second per hectar. The default unit is 'lsha'
         */
        unit?: string;
        /**
         * A comma-separated list of the fields that should be present in the response. The sourceId and values attributes will always be returned in the query result. Leaving this parameter empty returns all attributes; otherwise only those properties listed will be visible in the result set (in addition to the sourceId and values); e.g.: unit,numberOfSeasons will show only sourceId, unit, numberOfSeasons, and values in the response.
         */
        fields?: string;
    };
    url: '/frequencies/rainfall/v0.{format}';
};

export type GetRainfallIdfErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for the list of query Ids.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetRainfallIdfResponses = {
    /**
     * successful operation
     */
    200: RainfallIdfResponse;
};

export type GetRainfallIdfResponse = GetRainfallIdfResponses[keyof GetRainfallIdfResponses];

export type GetRainfallIdfSourcesData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query?: {
        /**
         * The Frost API source ID(s) that you want information for. Enter either a comma-separated list of one or more stations (each of the form SN&lt;number&gt;[:&lt;number&gt;|all]), or the name of a gridded dataset. If left out, information for all available sources is returned.
         */
        sources?: string;
        /**
         * The type(s) of Frost API source that you want information for. Enter a comma-separated list to select multiple types.
         */
        types?: string;
        /**
         * A comma-separated list of the fields that should be present in the response. The sourceId attribute will always be returned in the query result. Leaving this parameter empty returns all attributes; otherwise only those properties listed will be visible in the result set (in addition to the sourceId); e.g.: validFrom,numberOfSeasons will show only sourceId, validFrom, and numberOfSeasons in the response.
         */
        fields?: string;
    };
    url: '/frequencies/rainfall/availableSources/v0.{format}';
};

export type GetRainfallIdfSourcesErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for the list of query Ids.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetRainfallIdfSourcesResponses = {
    /**
     * successful operation
     */
    200: RainfallIdfSourcesResponse;
};

export type GetRainfallIdfSourcesResponse = GetRainfallIdfSourcesResponses[keyof GetRainfallIdfSourcesResponses];

export type GetLocationsData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query?: {
        /**
         * The Frost API location names that you want metadata for. Enter a comma-separated list to select multiple location names. Leave blank to get all names.
         */
        names?: string;
        /**
         * Get Frost API location names by geometry. Geometries are specified as either nearest(POINT(...)) or POLYGON(...) using <a href='https://en.wikipedia.org/wiki/Well-known_text'>WKT</a>; see the reference section on the <a href=concepts2.html#geometryspecification>Geometry Specification</a> for documentation and examples.
         */
        geometry?: string;
        /**
         * A comma-separated list of the fields that should be present in the response. If set, only those properties listed here will be visible in the result set; e.g.: name,geometry will show only those two entries in the data set.
         */
        fields?: string;
    };
    url: '/locations/v0.{format}';
};

export type GetLocationsErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for the list of query Ids.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetLocationsResponses = {
    /**
     * successful operation
     */
    200: LocationResponse;
};

export type GetLocationsResponse = GetLocationsResponses[keyof GetLocationsResponses];

export type TimeSeriesData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query?: {
        /**
         * The ID(s) of the data sources to get time series for as a comma-separated list of Frost API station IDs: SN&lt;int&gt;[:&lt;int&gt;|all] (e.g. SN18700, SN18700:0, or SN18700:all). 0 is the main sensor and x&ge;1 is a parallel sensor. Retrieve the complete station lists using the <a href="https://frost.met.no/api.html#!/sources">sources</a> resource. If left out, time series for all available stations are retrieved.
         */
        sources?: string;
        /**
         * The time range to get time series for as extended ISO-8601 format. See <a href=concepts2.html#time_specification>Time Specifications</a> for documentation and examples. Note: in this case 'latest' is not supported, only the explicit from/to form. If left out, time series for all available periods are retrieved.
         */
        referencetime?: string;
        /**
         * The elements to get time series for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. Elements follow the Frost API naming convention. Available element names can be found <a href="https://frost.met.no/api.html#!/elements">here</a>. If left out, time series for all available elements are retrieved.
         */
        elements?: string;
        /**
         * The time offsets to get time series for as a comma-separated list of ISO-8601 periods, e.g. 'PT6H,PT18H' or <a href=concepts2.html#level-offset-filter>default</a>. If left out, the output is not filtered on time offset.
         */
        timeoffsets?: string;
        /**
         * The time resolutions to get time series for as a comma-separated list of ISO-8601 periods, e.g. 'PT6H,PT18H'. If left out, the output is not filtered on time resolution.
         */
        timeresolutions?: string;
        /**
         * The internal time series IDs to get time series for as a comma-separated list of integers, e.g. '0,1'. The default value is 0.
         */
        timeseriesids?: string;
        /**
         * The performance categories to get time series for as a comma-separated list of letters, e.g. 'A,C'. If left out, the output is not filtered on performance category.
         */
        performancecategories?: string;
        /**
         * The exposure categories to get time series for as a comma-separated list of integers, e.g. '1,2'. If left out, the output is not filtered on exposure category.
         */
        exposurecategories?: string;
        /**
         * The sensor levels to get observations for as a comma-separated list of numbers, e.g. '0.1,2,10,20' or <a href=concepts2.html#level-offset-filter>default</a>. If left out, the output is not filtered on sensor level.
         */
        levels?: string;
        /**
         * The sensor level types to get records for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. If left out, the output is not filtered on sensor level type.
         */
        levelTypes?: string;
        /**
         * The sensor level units to get records for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. If left out, the output is not filtered on sensor level unit.
         */
        levelUnits?: string;
        /**
         * Fields to include in the output as a comma-separated list. If specified, only these fields are included in the output. If left out, all fields are included.
         */
        fields?: string;
    };
    url: '/observations/availableTimeSeries/v0.{format}';
};

export type TimeSeriesErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for the list of query Ids.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type TimeSeriesResponses = {
    /**
     * successful operation
     */
    200: ObservationTimeSeriesResponse;
};

export type TimeSeriesResponse = TimeSeriesResponses[keyof TimeSeriesResponses];

export type ObservationsData = {
    body?: never;
    path: {
        /**
         * The output format of the result. Json is fully supported, while CSV is still in Beta!
         */
        format: 'jsonld' | 'csv';
    };
    query: {
        /**
         * The ID(s) of the data sources to get observations for as a comma-separated list of Frost API station IDs: SN&lt;int&gt;[:&lt;int&gt;|all] (e.g. SN18700, SN18700:0, or SN18700:all). 0 is the main sensor and x&ge;1 is a parallel sensor. Retrieve the complete station lists using the <a href=api.html#/sources>sources</a> resource.
         */
        sources: string;
        /**
         * The time range to get observations for in either extended ISO-8601 format or the single word 'latest'. See <a href=concepts2.html#time_specification>Time Specifications</a> for documentation and examples.
         */
        referencetime: string;
        /**
         * The elements to get observations for as a comma-separated list of names that follow the Frost API naming convention. Available element names can be found <a href=api.html#/elements>here</a>.
         */
        elements: string;
        /**
         * The maximum observation age as an ISO-8601 period, like 'P1D'. Applicable only when referencetime=latest. In general, the lower the value of maxage, the shorter the request will take to complete. The default value is 'PT3H'.
         */
        maxage?: string;
        /**
         * The maximum number of observation times to be returned for each source/element combination, counting from the most recent time. Applicable only when referencetime=latest. Specify either 'all' to get all available times, or a positive integer. The default value is 1.
         */
        limit?: string;
        /**
         * The time offsets to get observations for as a comma-separated list of ISO-8601 periods, e.g. 'PT6H,PT18H' or <a href=concepts2.html#level-offset-filter>default</a>. If left out, the output is not filtered on time offset.
         */
        timeoffsets?: string;
        /**
         * The time resolutions to get observations for as a comma-separated list of ISO-8601 periods, e.g. 'PT6H,PT18H'. If left out, the output is not filtered on time resolution.
         */
        timeresolutions?: string;
        /**
         * The internal time series IDs to get observations for as a comma-separated list of integers, e.g. '0,1'. The default value is 0.
         */
        timeseriesids?: string;
        /**
         * The performance categories to get observations for as a comma-separated list of letters, e.g. 'A,C'. Enter a comma-separated list to specify multiple performance categories. If left out, the output is not filtered on performance category.
         */
        performancecategories?: string;
        /**
         * The exposure categories to get observations for as a comma-separated list of integers, e.g. '1,2'. If left out, the output is not filtered on exposure category.
         */
        exposurecategories?: string;
        /**
         * The qualities to get observations for as a comma-separated list of integers, e.g. '1,2'. See <a href="https://frost.met.no/api.html#/observations/availableQualityCodes"> available qualities and their meaning. </a> If left out, the output is not filtered by quality.
         */
        qualities?: string;
        /**
         * The sensor levels to get observations for as a comma-separated list of numbers, e.g. '0.1,2,10,20' or <a href=concepts2.html#level-offset-filter>default</a>. If left out, the output is not filtered on sensor level.
         */
        levels?: string;
        /**
         * If this query parameter is set to 1 and extra data is available, this data is included in the response. Extra data currently consists of the original observation value and the 16-character control info.
         */
        includeextra?: string;
        /**
         * Fields to include in the output as a comma-separated list. If specified, only these fields are included in the output. If left out, all fields are included.
         */
        fields?: string;
    };
    url: '/observations/v0.{format}';
};

export type ObservationsErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * Too many observations requested.
     */
    403: unknown;
    /**
     * No data was found for the query parameters.
     */
    404: unknown;
    /**
     * No available time series for the query parameters.
     */
    412: unknown;
    /**
     * The service is busy. Too many requests in progress. Retry-After is set with the number of seconds before the request should be retried again.
     */
    429: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
    /**
     * The service is busy. Too many requests in progress. Retry-After is set with the number of seconds before the request should be retried again.
     */
    503: unknown;
};

export type ObservationsResponses = {
    /**
     * successful operation
     */
    200: ObservationResponse;
};

export type ObservationsResponse = ObservationsResponses[keyof ObservationsResponses];

export type MetadataUpdateCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/observations/metadataupdatecount/v0';
};

export type MetadataUpdateCountResponses = {
    /**
     * successful operation
     */
    200: ActionAnyContent;
};

export type MetadataUpdateCountResponse = MetadataUpdateCountResponses[keyof MetadataUpdateCountResponses];

export type QualityData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query: {
        /**
         * The quality flag combination you want information about. Normally, you should get this from an observations call.
         */
        flags: string;
        /**
         * Fields to access
         */
        fields?: 'summarized' | 'flag' | 'details';
        /**
         * ISO language/locale of return values.
         */
        lang?: 'en-US' | 'nb-NO' | 'nn-NO';
    };
    url: '/observations/quality/v0.{format}';
};

export type QualityErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for the list of query Ids.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type QualityResponses = {
    /**
     * successful operation
     */
    200: QualityInformationResponse;
};

export type QualityResponse = QualityResponses[keyof QualityResponses];

export type AvailableQualityCodesData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query?: {
        /**
         * ISO language/locale of return values.
         */
        lang?: 'en-US' | 'nb-NO' | 'nn-NO';
        /**
         * Fields to access
         */
        fields?: 'summarized' | 'details';
    };
    url: '/observations/availableQualityCodes/v0.{format}';
};

export type AvailableQualityCodesErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for the list of query Ids.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type AvailableQualityCodesResponses = {
    /**
     * successful operation
     */
    200: QualityInformationResponse;
};

export type AvailableQualityCodesResponse = AvailableQualityCodesResponses[keyof AvailableQualityCodesResponses];

export type LastUpdateData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/observations/lastupdate/v0';
};

export type LastUpdateResponses = {
    /**
     * successful operation
     */
    200: ActionAnyContent;
};

export type LastUpdateResponse = LastUpdateResponses[keyof LastUpdateResponses];

export type GetRecordsData = {
    body?: never;
    path: {
        /**
         * The output format of the result.
         */
        format: 'jsonld';
    };
    query?: {
        /**
         * The sources to get records for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. If left out, the output is not filtered on source.
         */
        sources?: string;
        /**
         * The source names to get records for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. If left out, the output is not filtered on source name.
         */
        sourcenames?: string;
        /**
         * The counties to get records for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. If left out, the output is not filtered on county.
         */
        counties?: string;
        /**
         * The municipalities to get records for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. If left out, the output is not filtered on municipality.
         */
        municipalities?: string;
        /**
         * The elements to get records for as a comma-separated list of <a href=concepts2.html#searchfilter>search filters</a>. If left out, the output is not filtered on element.
         */
        elements?: string;
        /**
         * The months to get records for as a comma-separated list of integers or integer ranges between 1 and 12, e.g. '1,5,8-12'.  If left out, the output is not filtered on month.
         */
        months?: string;
        /**
         * The information to return as a comma-separated list of 'sourceid', 'sourcename', 'county', 'municipality', 'elementid', 'month', 'referencetime', or 'value'. For example 'county,month,referencetime1,elementid,value'. If omitted, all fields are returned.
         */
        fields?: string;
    };
    url: '/records/countyExtremes/v0.{format}';
};

export type GetRecordsErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for this combination of query parameters.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
};

export type GetRecordsResponses = {
    /**
     * successful operation
     */
    200: RecordsResponse;
};

export type GetRecordsResponse = GetRecordsResponses[keyof GetRecordsResponses];

export type GetLightningData = {
    body?: never;
    path: {
        /**
         * The output format of the result is <a href=dataclarifications.html#ualf>ualf</a>
         */
        format: 'ualf';
    };
    query: {
        /**
         * The time range to get observations for in either extended ISO-8601 format or the single word 'latest'. See <a href=concepts2.html#timespecification>Time Specifications</a> for documentation and examples.
         */
        referencetime: string;
        /**
         * The maximum observation age as an ISO-8601 period, like 'P1D'. Applicable only when referencetime=latest. In general, the lower the value of maxage, the shorter the request will take to complete. The default value is 'PT5M'.
         */
        maxage?: string;
        /**
         * Get lightning within a polygon specified as POLYGON(...) using <a href='https://en.wikipedia.org/wiki/Well-known_text'>WKT</a>; see the reference section on the <a href=concepts2.html#geometryspecification>Geometry Specification</a> for documentation and examples.
         */
        geometry?: string;
    };
    url: '/lightning/v0.{format}';
};

export type GetLightningErrors = {
    /**
     * Invalid parameter value or malformed request.
     */
    400: unknown;
    /**
     * Unauthorized client ID.
     */
    401: unknown;
    /**
     * No data was found for the list of query Ids.
     */
    404: unknown;
    /**
     * Internal server error.
     */
    500: unknown;
    /**
     * Service temporarily unavailable.
     */
    503: unknown;
};

export type GetLightningResponses = {
    /**
     * successful operation
     */
    200: string;
};

export type GetLightningResponse = GetLightningResponses[keyof GetLightningResponses];

export type ClientOptions = {
    baseUrl: 'https://frost.met.no/' | (string & {});
};